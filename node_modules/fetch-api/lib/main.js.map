{"version":3,"sources":["../src/main.js"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["\n//     node-react-native-fetch-api\n//     Copyright (c) 2015- Nick Baugh <niftylettuce@gmail.com>\n//     MIT Licensed\n\n// * Author: [@niftylettuce](https://twitter.com/#!/niftylettuce)\n// * Source: <https://github.com/niftylettuce/node-react-native-fetch-api>\n\n// # node-react-native-fetch-api\n\nimport Debug from 'debug';\n\nconst debug = Debug('fetch-api');\nconst fetch = typeof window === 'undefined' ? global.fetch : window.fetch;\n\nif (!fetch)\n  throw new Error('fetch is required, use `whatwg-fetch` or `node-fetch`');\n\nlet methods = [\n  'get',\n  'head',\n  'post',\n  'put',\n  'del',\n  'options',\n  'patch'\n];\n\nexport default class Api {\n\n  constructor(opts) {\n\n    this.opts = opts || {};\n\n    if (!this.opts.baseURI)\n      throw new Error('baseURI option is required');\n\n    this.headers = {\n      ...opts.headers,\n      'Accept': 'application/json',\n      'Content-Type': 'application/json'\n    }\n\n    // support `auth` being an array or a string\n    // and if it is a string and contains ':'\n    // then split on that and only return 2 keys\n    if (this.opts.auth)\n      this.auth(this.opts.auth);\n\n    methods.forEach((method) => {\n      this[method] = this._setup(method);\n    });\n\n  }\n\n  _setup(method) {\n\n    let that = this;\n\n    return (path, options, callback) => {\n\n      // TODO: path must be string\n\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      // TODO: callback must be a function\n\n      let opts = {\n        headers: {\n          ...that.headers\n        },\n        ...options,\n        method: method === 'del' ? 'DELETE' : method.toUpperCase()\n      };\n\n      let res;\n\n      fetch(\n        that.opts.baseURI + path,\n        opts\n      ).then((_res) => {\n        res = _res;\n        try {\n          _res = _res.json();\n        } catch (e) {\n          _res = _res.text();\n        } finally {\n          return _res;\n        }\n      }).then((body) => {\n        callback(null, res, body);\n      }).catch((err) => {\n        callback(err);\n      });\n\n    }\n  }\n\n  auth(creds) {\n\n    if (typeof creds === 'string') {\n      let index = creds.indexOf(':');\n      if (index !== -1) {\n        let split = creds.split(':');\n        creds = [\n          split.slice(0),\n          split.slice(index, split.length)\n        ]\n      } else {\n        creds = [ creds ];\n      }\n    }\n\n    if (!creds instanceof Array)\n      throw new Error('auth must be an array or string');\n\n    switch (creds.length) {\n    case 0:\n      creds = new Array('', '');\n      break;\n    case 1:\n      creds.push('');\n      break;\n    case 2:\n      break;\n    default:\n      throw new Error('auth option can only have two keys `[user, pass]`')\n    }\n\n    if (typeof creds[0] !== 'string')\n      throw new Error('auth option `user` must be a string');\n\n    if (typeof creds[1] !== 'string')\n      throw new Error('auth option `pass` must be a string');\n\n    if (creds[0] === '' && creds[1] === '')\n      delete this.headers.Authorization;\n    else\n      this.headers.Authorization =\n        'Basic ' + new Buffer(creds.join(':')).toString('base64');\n  }\n\n  /*\n      get(path, fn) {\n        fetch(that.opts.baseURI + path, {\n          method: 'GET',\n          headers: that.headers\n        })\n        .then((res) => {\n          try {\n            let response = JSON.parse(res);\n            if (response && response.error)\n              throw new Error(response.error);\n            return res.json();\n          } catch (e) {\n            return res.text();\n          }\n        })\n        .then((res) => {\n          fn(null, res);\n        })\n        .catch((err) => {\n          fn(err);\n        })\n      },\n      post(path, data, fn) {\n        if (!fn)\n          fn = data;\n        fetch(that.opts.baseURI + path, {\n          method: 'POST',\n          body: JSON.stringify(data),\n          headers: that.headers\n        })\n        .then((res) => res.json())\n        .then((res) => {\n          if (res && res.error)\n            return fn(res.error);\n          fn(null, res);\n        })\n        .catch(fn)\n      },\n      put(path, data, fn) {\n        fetch(that.opts.baseURI + path, {\n          method: 'PUT',\n          body: JSON.stringify(data),\n          headers: that.headers\n        })\n        .then((res) => res.json())\n        .then((res) => {\n          if (res && res.error)\n            return fn(res.error);\n          fn(null, res);\n        })\n        .catch(fn)\n      },\n      delete(path, data, fn) {\n        fetch(that.opts.baseURI + path, {\n          method: 'DELETE',\n          headers: that.headers\n        })\n        .then((res) => res.json())\n        .then((res) => {\n          if (res && res.error)\n            return fn(res.error);\n          fn(null, res);\n        })\n        .catch(fn)\n      }\n    };\n  }\n  */\n\n}\n"]}